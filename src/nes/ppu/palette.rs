#[derive(Debug)]
pub struct Palette(u8);

impl Palette {
    pub fn new(palette_number: u8) -> Self {
        Palette(palette_number)
    }

    pub fn get_palette_number(&self) -> u8 {
        self.0
    }

    pub fn get_color_code(&self) -> (u8, u8, u8) {
        let colors = NES_COLORS[self.get_palette_number() as usize];
        (colors[0], colors[1], colors[2])
    }
}

impl PartialEq for Palette {
    fn eq(&self, other: &Palette) -> bool {
        self.0 == other.0
    }
}

#[derive(Debug)]
pub struct PaletteGroup([Palette; 4]);

impl PaletteGroup {
    pub fn build(palette_numbers: &[u8; 4]) -> Self {
        let palettes = [
            Palette::new(palette_numbers[0]),
            Palette::new(palette_numbers[1]),
            Palette::new(palette_numbers[2]),
            Palette::new(palette_numbers[3]),
        ];

        PaletteGroup(palettes)
    }

    pub fn get(&self, num: usize) -> &Palette {
        &self.0[num]
    }
}

impl PartialEq for PaletteGroup {
    fn eq(&self, other: &PaletteGroup) -> bool {
        self.0[0] == other.0[0]
            && self.0[1] == other.0[1]
            && self.0[2] == other.0[2]
            && self.0[3] == other.0[3]
    }
}

pub static NES_COLORS: [[u8; 3]; 64] = [
    [0x80, 0x80, 0x80],
    [0x00, 0x3D, 0xA6],
    [0x00, 0x12, 0xB0],
    [0x44, 0x00, 0x96],
    [0xA1, 0x00, 0x5E],
    [0xC7, 0x00, 0x28],
    [0xBA, 0x06, 0x00],
    [0x8C, 0x17, 0x00],
    [0x5C, 0x2F, 0x00],
    [0x10, 0x45, 0x00],
    [0x05, 0x4A, 0x00],
    [0x00, 0x47, 0x2E],
    [0x00, 0x41, 0x66],
    [0x00, 0x00, 0x00],
    [0x05, 0x05, 0x05],
    [0x05, 0x05, 0x05],
    [0xC7, 0xC7, 0xC7],
    [0x00, 0x77, 0xFF],
    [0x21, 0x55, 0xFF],
    [0x82, 0x37, 0xFA],
    [0xEB, 0x2F, 0xB5],
    [0xFF, 0x29, 0x50],
    [0xFF, 0x22, 0x00],
    [0xD6, 0x32, 0x00],
    [0xC4, 0x62, 0x00],
    [0x35, 0x80, 0x00],
    [0x05, 0x8F, 0x00],
    [0x00, 0x8A, 0x55],
    [0x00, 0x99, 0xCC],
    [0x21, 0x21, 0x21],
    [0x09, 0x09, 0x09],
    [0x09, 0x09, 0x09],
    [0xFF, 0xFF, 0xFF],
    [0x0F, 0xD7, 0xFF],
    [0x69, 0xA2, 0xFF],
    [0xD4, 0x80, 0xFF],
    [0xFF, 0x45, 0xF3],
    [0xFF, 0x61, 0x8B],
    [0xFF, 0x88, 0x33],
    [0xFF, 0x9C, 0x12],
    [0xFA, 0xBC, 0x20],
    [0x9F, 0xE3, 0x0E],
    [0x2B, 0xF0, 0x35],
    [0x0C, 0xF0, 0xA4],
    [0x05, 0xFB, 0xFF],
    [0x5E, 0x5E, 0x5E],
    [0x0D, 0x0D, 0x0D],
    [0x0D, 0x0D, 0x0D],
    [0xFF, 0xFF, 0xFF],
    [0xA6, 0xFC, 0xFF],
    [0xB3, 0xEC, 0xFF],
    [0xDA, 0xAB, 0xEB],
    [0xFF, 0xA8, 0xF9],
    [0xFF, 0xAB, 0xB3],
    [0xFF, 0xD2, 0xB0],
    [0xFF, 0xEF, 0xA6],
    [0xFF, 0xF7, 0x9C],
    [0xD7, 0xE8, 0x95],
    [0xA6, 0xED, 0xAF],
    [0xA2, 0xF2, 0xDA],
    [0x99, 0xFF, 0xFC],
    [0xDD, 0xDD, 0xDD],
    [0x11, 0x11, 0x11],
    [0x11, 0x11, 0x11],
];

#[cfg(test)]
mod palette_test {
    use super::*;

    #[test]
    fn eq_test() {
        let palette_1 = Palette::new(0x10);
        let palette_2 = Palette::new(0x10);
        assert_eq!(palette_1, palette_2);

        let palette_1 = Palette::new(0x10);
        let palette_2 = Palette::new(0x20);
        assert_ne!(palette_1, palette_2);
    }

    #[test]
    fn get_color_code_test() {
        let palette = Palette::new(3);
        assert_eq!(palette.get_color_code(), (0x44, 0x00, 0x96));
    }
}

#[cfg(test)]
mod palette_group_test {
    use super::*;

    #[test]
    fn build_test() {
        let palette_numbers = [0x10, 0x20, 0x30, 0x40];
        let palette_group = PaletteGroup::build(&palette_numbers);

        assert_eq!(palette_group.get(0).get_palette_number(), 0x10);
        assert_eq!(palette_group.get(1).get_palette_number(), 0x20);
        assert_eq!(palette_group.get(2).get_palette_number(), 0x30);
        assert_eq!(palette_group.get(3).get_palette_number(), 0x40);
    }

    #[test]
    fn eq_test() {
        let palettes_1 = PaletteGroup::build(&[0x10, 0x11, 0x12, 0x13]);
        let palettes_2 = PaletteGroup::build(&[0x10, 0x11, 0x12, 0x13]);
        assert!(palettes_1 == palettes_2);

        let palettes_1 = PaletteGroup::build(&[0x10, 0x11, 0x12, 0x13]);
        let palettes_2 = PaletteGroup::build(&[0x00, 0x11, 0x12, 0x13]);
        assert!(palettes_1 != palettes_2);
    }
}
